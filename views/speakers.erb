<div class="column_1">
  <div class="block">
    <h2>Sponsoring</h2>
  </div>
  <script>
    $(function() {
      $( "#tabs" ).tabs();
    });
  </script>

  <div id="speakers-tabs">
      <div >

  <div id="tabs">
    <ul>
      <li>
        <a href="#michael-bensoussa">
        <h3>
          Michael Bensoussan
        </h3>
        </a>
      </li>

      <li>
        <a href="#lucas-dicioccio">
        <h3>
          Lucas DiCioccio
        </h3>
        </a>
      </li>
      <li>
        <a href="#bruno-michel">
        <h3>
          Bruno Michel
        </h3>
        </a>
      </li>
      <li>
        <a href="#nick-the-german-sutterer">
        <h3>
          Nick "The German" Sutterer
        </h3>
        </a>
      </li>
      <li>
        <a href="#elise-huard">
    <h3>
                  Elise Huard
    </h3>
        </a>
      </li>
      <li>
        <a href="#r-konstantin-haase">
    <h3>
      R. Konstantin Haase
    </h3>
        </a>
      </li>
      <li>
        <a href="#joshua-wehner">
    <h3>
      Joshua Wehner
    </h3>
        </a>
      </li>
    </ul>


  <div id="speakers-tabs-people" >
  <div id="michael-bensoussa" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
    <img src="/images/speakers/default.png" alt="">
    <h3>Michael Bensoussan</h3>
      <p>
  <a href="https://github.com/mickey">
    @github
  </a>
  |
  <a href="http://twitter.com/mickeyben">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
  Michael is a ruby and rails enthusiast for 3 years now.
  He worked at various startups ; Eyeka, Seesmic and now Letitcast.
  Recently he had been giving Rails training in Paris for entrepreneurs
  and CS students.
  When not writing code, he can be found lost in a bookstore,
  losing himself in Paris or just in front of his screen
  waiting for the new Civ V patch.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
  Service Oriented Applications
      </h5>
      <span class="summary">
        <p>
    Not completely define yet but I'll mostly talk about how
    we cut our monolythic application into a rails api,
    3 rails clients, 2 sinatra services and a rails engine
        </p>
      </span>

    </div>
  </div>
  <div id="lucas-dicioccio" class="ui-tabs-panel ui-widget-content ui-corner-bottom">


    <img src="/images/speakers/default.png" alt="">
    <h3>Lucas DiCioccio</h3>
      <p>
  <a href="https://github.com/lucasdicioccio">
    @github
  </a>
  |
  <a href="http://twitter.com/lucasdicioccio">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
Lucas DiCioccio is a French PhD student on home network measurements at Technicolor/LIP6, and a Ruby enthusiast. He recently released HomeNet Profiler, a ruby-everywhere (client, server, and data-analyses) measurement tool to collect data on home networks at end-host.
Beforehand, he wrote Probecraft, a library to write packet-level active measurements, and Laborantin, an experiments management framework.
In his past life, he graduated from a French/Italian engineer cursus, worked one year in a cellphone company.
He likes network protocols, pretty code, data, and simplicity.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
 Designing a network application: from TCPServer to Goliath
      </h5>
      <span class="summary">
        <p>
In this talk, we will look at the problem of handling concurrent requests in Ruby web servers. After a reharsal on network (TCP) programming, we will discuss two orthogonal problems in web servers: having a friendly APIs and managing concurrent access. Given this problem space, we will then navigate along the path of Ruby webservers' implementation. We will finish with Goliath, the more advanced solution.
After the talk, attendees should have a comprehensive picture of networked application's design. They should be able to tell what to change in their code to make it more efficient.
        </p>
      </span>

    </div>


  </div>
  <div id="bruno-michel" class="ui-tabs-panel ui-widget-content ui-corner-bottom">

  <img src="/images/speakers/default.png" alt="">
    <h3>Bruno Michel</h3>
      <p>
  <a href="https://github.com/nono">
    @github
  </a>
  |
  <a href="http://twitter.com/brmichel">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
Lead developer chez af83
Développeur et administrateur du site LinuxFr.org
Membre du conseil d'administration de l'association Ruby France (et peut-être président bientôt)
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
Goliath et ses amis Rack, EventMachine et Fibers
      </h5>
      <span class="summary">
        <p>
Goliath est un framework Ruby basé sur EventMachine, qui utilise l'API de Rack et tire parti des fibres de Ruby 1.9. Cela en fait un framework léger, capable d'offrir d'excellentes performances et de traiter de manières asynchrones de nombreuses entrées/sorties, le tout de manière très élégante. Il convient donc très bien pour écrire des petits services web : uploads de fichiers en streaming HTTP, firehose à la Twitter, proxy divers et variés...
        </p>
      </span>

    </div>
  </div>
  <div id="nick-the-german-sutterer" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
    <img src="/images/speakers/default.png" alt="">
    <h3>
       Nick "The German" Sutterer
    </h3>
      <p>
  <a href="https://github.com/apotonick">
    @github
  </a>
  |
  <a href="http://twitter.com/apotonick">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
Nick Sutterer appreciates the beauty of elegant code, and the value of open source software. Through his tireless development and advocacy of the Cells and Apotomo gems, he has brought the concepts of component-oriented UI development to the world of Rails, proving that there should be no such thing as a double-render error, and that one need not be slave to the great monolithic view mentality. Also, he would like to have beer with you.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
CRUD is not REST! Hypermedia for y'all!
      </h5>
      <span class="summary">
        <p>
REST is an architectural style for distributed systems. However, many implementations forget about the distributed part of REST and simply map CRUD operations to HTTP verbs in a monolithic application. Hey, we want more! So let's have a look at the Roar gem and see how it helps working with representations, hypermedia, and decoupled architectures in Rails and Sinatra. While building both services and a consuming client we can discuss the sweet things about component-oriented architectures and french beer.
        </p>
      </span>

    </div>
  </div>
  <div id="elise-huard" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
    <img src="/images/speakers/default.png" alt="">
    <h3>Elise Huard</h3>
      <p>
  <a href="https://github.com/elisehuard">
    @github
  </a>
  |
  <a href="http://jabberwocky.eu/">
    @blog
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
After her studies in metallurgy, Elise realized job in that area were not her cup of tea, and she looked for jobs in an earlier interest, software.

Since then, she’s been rolling through jobs in C, C++, Java, a masters in AI, before falling in love with Ruby and going freelance. 10 years of software have helped her get a firm understanding on what works, what doesn’t, and what will make you cry blood and tears on nights before deadlines.

She’s a jack of all trades, loves reading, tinkering, food, travel, learning, and people out of the ordinary.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
Ruby goes to Hollywood
      </h5>
      <span class="summary">
        <p>
Computers are being built with more and more CPUs and those CPUs in turn have several cores. Powerful calculations are now performed either on many-cored machines, or on distributed systems.
In this context, it's in the developer's interest to start thinking about concurrent programming. But concurrent programming with mutable is tricky. The last few years have conclusively shown that very few developers get this right when faced with conventional shared state threads.

One of the ways to simplify concurrent programming is the actor model.
In the actor model, programs are made of actors sending each other messages, and acting on the messages they receive. The actors don't share any state.

In this talk I explore several ways to implement the actor model in Ruby.

The existing actor implementations in Ruby:
- Rubinius actors
- existing actor gems (cross Ruby implementations)
Actor implementations that are a little more 'out there':
- bindings with the Akka framework in Scala with JRuby
- bindings with erlang, the first mainstream implementation of the actor model
And their advantages and drawbacks, and code examples.

The talk will also allude to the fact that threads in Ruby should ideally have separate state, so that all programs using threads could also use the actor model (or other similar concurrency models).
        </p>
      </span>

    </div>
  </div>
  <div id="r-konstantin-haase" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
    <img src="/images/speakers/default.png" alt="">
    <h3>R. Konstantin Haase</h3>


      <p>
  <a href="https://github.com/rkh">
    @github
  </a>
  |
  <a href="http://twitter.com/konstantinhaase">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
Ruby has become Konstantin Haase's language of choice since 2005. He therefore actively participates in the Ruby Open Source community and has contributed to different widespread projects, like Rubinius and Rack and is a member of the Sinatra core team. In 2010 he successfully took part as a student in the Ruby Summer Of Code, where he was working on Rails internals. Konstantin is currently studying IT Systems Engineering at Hasso Plattner Institute in Potsdam and works part time as a software engineer at finnlabs.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
Real Time Rack
      </h5>
      <span class="summary">
        <p>
At least since node.js everyone knows that real time HTTP responses are the next big thing. The secrets of handling incoming requests asynchronously with Ruby is not yet far spread among Rubyists, as the internals needed for such responses are neither specified nor documented and there is a lack of tools. Still, it is possible to use Server-Sent Events,  Websockets and akin with Rack today. This talk will demonstrate the underlying technologies and how to use them.
        </p>
        <p>
        Note:
I already gave that talk at the Scottish Ruby Conference. This version will be optimzed (better introduction, other weighting of the topics). I will also propose another talk and let you choose.
        </p>
      </span>

    </div>
  </div>
  <div id="joshua-wehner" class="ui-tabs-panel ui-widget-content ui-corner-bottom">

    <img src="/images/speakers/default.png" alt="">
    <h3>Joshua Wehner</h3>
      <p>
  <a href="https://github.com/">
    @github
  </a>
  |
  <a href="http://twitter.com/">
    @twitter
  </a>
      </p>
    <div class="side_pres">
      <h4 class="side_title">
  Bio
      </h4>
      <span class="summary">
        <p>
Joshua is passionate about all the little things that make each of us weird. His wife taught him that Ruby doesn't solve everything. He speaks four languages badly, plays games often, enjoys puns more than he should, and occasionally makes a lovely soufflé.
        </p>
      </span>
      <h4 class="side_title">
  Abstract
      </h4>
      <h5 class="side_title">
KEYNOTE Must It Always Be About Sex?
      </h5>
      <span class="summary">
        <p>
Why do some people keep talking about diversity? Who cares if we're all the same? So long as we're not technically discriminating against anyone, that means we're good, right? If we only get applications from white dudes, that must mean that white dudes are the only ones out there. Right? Right?

When we feel threatened, we find comfort among people who seem most like us. As specialization increases in the community, we glom on to people who look like us, talk like us, and think like us. There's safety in a crowd.

But there are real dangers in becoming too much alike: monotony breeds more monotony. Real innovation happens when you think different than everyone else. What happens when we ruthlessly eliminate different thinkers, as we winnow the stack of resumés to those that seem most likely to "fit in"?

Come to this talk to find out what you can do to diversify - yourself, your organization, and your peers - and how you can help grow a better, stronger, more diverse community.
        </p>
      </span>

    </div>

  </div>

 </div>
      </div>
    </div>
  </div>
</div>
